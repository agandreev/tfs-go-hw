// Code generated by MockGen. DO NOT EDIT.
// Source: pair.go

// Package mock_service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	domain "github.com/agandreev/tfs-go-hw/CourseWork/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockStockMarketSocket is a mock of StockMarketSocket interface.
type MockStockMarketSocket struct {
	ctrl     *gomock.Controller
	recorder *MockStockMarketSocketMockRecorder
}

// MockStockMarketSocketMockRecorder is the mock recorder for MockStockMarketSocket.
type MockStockMarketSocketMockRecorder struct {
	mock *MockStockMarketSocket
}

// NewMockStockMarketSocket creates a new mock instance.
func NewMockStockMarketSocket(ctrl *gomock.Controller) *MockStockMarketSocket {
	mock := &MockStockMarketSocket{ctrl: ctrl}
	mock.recorder = &MockStockMarketSocketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockMarketSocket) EXPECT() *MockStockMarketSocketMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockStockMarketSocket) Connect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockStockMarketSocketMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockStockMarketSocket)(nil).Connect), arg0)
}

// SubscribeCandle mocks base method.
func (m *MockStockMarketSocket) SubscribeCandle(arg0 Pair, arg1 chan domain.Candle, arg2 chan PairError) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeCandle", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeCandle indicates an expected call of SubscribeCandle.
func (mr *MockStockMarketSocketMockRecorder) SubscribeCandle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeCandle", reflect.TypeOf((*MockStockMarketSocket)(nil).SubscribeCandle), arg0, arg1, arg2)
}

// MockIndicator is a mock of Indicator interface.
type MockIndicator struct {
	ctrl     *gomock.Controller
	recorder *MockIndicatorMockRecorder
}

// MockIndicatorMockRecorder is the mock recorder for MockIndicator.
type MockIndicatorMockRecorder struct {
	mock *MockIndicator
}

// NewMockIndicator creates a new mock instance.
func NewMockIndicator(ctrl *gomock.Controller) *MockIndicator {
	mock := &MockIndicator{ctrl: ctrl}
	mock.recorder = &MockIndicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndicator) EXPECT() *MockIndicatorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIndicator) Add(candle domain.Candle) (domain.Signal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", candle)
	ret0, _ := ret[0].(domain.Signal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockIndicatorMockRecorder) Add(candle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIndicator)(nil).Add), candle)
}
