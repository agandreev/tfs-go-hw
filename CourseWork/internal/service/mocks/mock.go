// Code generated by MockGen. DO NOT EDIT.
// Source: algo_trader.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	domain "github.com/agandreev/tfs-go-hw/CourseWork/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepository) AddUser(user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepositoryMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepository)(nil).AddUser), user)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), arg0)
}

// GenerateJWT mocks base method.
func (m *MockUserRepository) GenerateJWT(arg0 domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockUserRepositoryMockRecorder) GenerateJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockUserRepository)(nil).GenerateJWT), arg0)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(arg0 string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), arg0)
}

// ParseToken mocks base method.
func (m *MockUserRepository) ParseToken(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockUserRepositoryMockRecorder) ParseToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockUserRepository)(nil).ParseToken), arg0)
}

// SetKeys mocks base method.
func (m *MockUserRepository) SetKeys(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeys", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeys indicates an expected call of SetKeys.
func (mr *MockUserRepositoryMockRecorder) SetKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeys", reflect.TypeOf((*MockUserRepository)(nil).SetKeys), arg0, arg1, arg2)
}

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderRepository) AddOrder(arg0 domain.OrderInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderRepositoryMockRecorder) AddOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderRepository)(nil).AddOrder), arg0)
}

// Connect mocks base method.
func (m *MockOrderRepository) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockOrderRepositoryMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockOrderRepository)(nil).Connect))
}

// GetOrders mocks base method.
func (m *MockOrderRepository) GetOrders(arg0 int64) ([]domain.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0)
	ret0, _ := ret[0].([]domain.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderRepositoryMockRecorder) GetOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetOrders), arg0)
}

// Shutdown mocks base method.
func (m *MockOrderRepository) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockOrderRepositoryMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockOrderRepository)(nil).Shutdown))
}

// MockMessageWriter is a mock of MessageWriter interface.
type MockMessageWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMessageWriterMockRecorder
}

// MockMessageWriterMockRecorder is the mock recorder for MockMessageWriter.
type MockMessageWriterMockRecorder struct {
	mock *MockMessageWriter
}

// NewMockMessageWriter creates a new mock instance.
func NewMockMessageWriter(ctrl *gomock.Controller) *MockMessageWriter {
	mock := &MockMessageWriter{ctrl: ctrl}
	mock.recorder = &MockMessageWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageWriter) EXPECT() *MockMessageWriterMockRecorder {
	return m.recorder
}

// Shutdown mocks base method.
func (m *MockMessageWriter) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockMessageWriterMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockMessageWriter)(nil).Shutdown))
}

// WriteError mocks base method.
func (m *MockMessageWriter) WriteError(message string, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteError", message, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteError indicates an expected call of WriteError.
func (mr *MockMessageWriterMockRecorder) WriteError(message, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteError", reflect.TypeOf((*MockMessageWriter)(nil).WriteError), message, user)
}

// WriteMessage mocks base method.
func (m *MockMessageWriter) WriteMessage(message domain.OrderInfo, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", message, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockMessageWriterMockRecorder) WriteMessage(message, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockMessageWriter)(nil).WriteMessage), message, user)
}

// MockStockMarketAPI is a mock of StockMarketAPI interface.
type MockStockMarketAPI struct {
	ctrl     *gomock.Controller
	recorder *MockStockMarketAPIMockRecorder
}

// MockStockMarketAPIMockRecorder is the mock recorder for MockStockMarketAPI.
type MockStockMarketAPIMockRecorder struct {
	mock *MockStockMarketAPI
}

// NewMockStockMarketAPI creates a new mock instance.
func NewMockStockMarketAPI(ctrl *gomock.Controller) *MockStockMarketAPI {
	mock := &MockStockMarketAPI{ctrl: ctrl}
	mock.recorder = &MockStockMarketAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockMarketAPI) EXPECT() *MockStockMarketAPIMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockStockMarketAPI) AddOrder(arg0 domain.StockMarketEvent, arg1 *domain.User) (domain.OrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1)
	ret0, _ := ret[0].(domain.OrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockStockMarketAPIMockRecorder) AddOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockStockMarketAPI)(nil).AddOrder), arg0, arg1)
}
